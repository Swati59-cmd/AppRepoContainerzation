name: App CI/CD

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-1
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set Variables 
        id: env-setup
        run: |
          if [[ "${GITHUB_REF_NAME}" == "dev" ]]; then
            echo "ECR_REPO_NAME=devpython" >> $GITHUB_ENV
            echo "CLUSTER_NAME=dev-ecs-cluster" >> $GITHUB_ENV
            echo "SERVICE_NAME=dev-service" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF_NAME}" == "stage" ]]; then
            echo "ECR_REPO_NAME=stagepython" >> $GITHUB_ENV
            echo "CLUSTER_NAME=stage-ecs-cluster" >> $GITHUB_ENV
            echo "SERVICE_NAME=stage-service" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "ECR_REPO_NAME=mainpython" >> $GITHUB_ENV
            echo "CLUSTER_NAME=main-ecs-cluster" >> $GITHUB_ENV
            echo "SERVICE_NAME=main-service" >> $GITHUB_ENV
          fi

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image
        run: |
          docker build -t $ECR_REPO_NAME:$IMAGE_TAG .
          docker tag $ECR_REPO_NAME:$IMAGE_TAG ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:$IMAGE_TAG
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:$IMAGE_TAG

      - name: Update ECS Task Definition with new image
        id: task-def
        run: |
          IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:$IMAGE_TAG"

          TASK_DEF_ARN=$(aws ecs describe-services \
            --cluster $CLUSTER_NAME \
            --services $SERVICE_NAME \
            --query "services[0].taskDefinition" \
            --output text)

          aws ecs describe-task-definition --task-definition $TASK_DEF_ARN \
            --query "taskDefinition | {
              family: family,
              executionRoleArn: executionRoleArn,
              networkMode: networkMode,
              containerDefinitions: containerDefinitions,
              requiresCompatibilities: requiresCompatibilities,
              cpu: cpu,
              memory: memory
            }" > task-def.json

          jq --arg IMAGE "$IMAGE_URI" \
             '.containerDefinitions[0].image = $IMAGE' \
             task-def.json > new-task-def.json

          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --query "taskDefinition.taskDefinitionArn" \
            --output text)

          echo "new_task_def_arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Update ECS Service with new task definition
        run: |
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --task-definition ${{ steps.task-def.outputs.new_task_def_arn }}
